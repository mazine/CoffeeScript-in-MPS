package jetbrains.mps.webr.coffeeScript.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import jetbrains.mps.smodel.SNodePointer;
import java.util.Map;
import jetbrains.mps.smodel.runtime.ReferenceConstraintsDescriptor;
import java.util.HashMap;
import jetbrains.mps.smodel.runtime.base.BaseReferenceConstraintsDescriptor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.runtime.ReferenceScopeProvider;
import jetbrains.mps.smodel.runtime.base.BaseReferenceScopeProvider;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.smodel.runtime.ReferenceConstraintsContext;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.internal.collections.runtime.Sequence;

public class CoffeeParameterReference_Constraints extends BaseConstraintsDescriptor {
  private static SNodePointer breakingNode_dhpr7m_a0a1a0a0a1a0b0a1a0 = new SNodePointer("r:31c3a77f-6844-4fb5-9323-34177b1967d1(jetbrains.mps.webr.coffeeScript.constraints)", "4009636172531310388");

  public CoffeeParameterReference_Constraints() {
    super("jetbrains.mps.webr.coffeeScript.structure.CoffeeParameterReference");
  }

  @Override
  protected Map<String, ReferenceConstraintsDescriptor> getNotDefaultReferences() {
    Map<String, ReferenceConstraintsDescriptor> references = new HashMap();
    references.put("baseVariableDeclaration", new BaseReferenceConstraintsDescriptor("baseVariableDeclaration", this) {
      @Override
      public boolean hasOwnScopeProvider() {
        return true;
      }

      @Nullable
      @Override
      public ReferenceScopeProvider getScopeProvider() {
        return new BaseReferenceScopeProvider() {
          @Override
          public Object createSearchScopeOrListOfNodes(final IOperationContext operationContext, final ReferenceConstraintsContext _context) {
            Map<String, SNode> declarations = MapSequence.fromMap(new HashMap<String, SNode>());
            for (SNode closure : ListSequence.fromList(SNodeOperations.getAncestors(_context.getEnclosingNode(), "jetbrains.mps.webr.coffeeScript.structure.CoffeeClosure", true))) {
              for (SNode declaration : ListSequence.fromList(SLinkOperations.getTargets(closure, "parameter", true))) {
                if (!(MapSequence.fromMap(declarations).containsKey(SPropertyOperations.getString(declaration, "variableName")))) {
                  MapSequence.fromMap(declarations).put(SPropertyOperations.getString(declaration, "variableName"), declaration);
                }
              }
            }
            return Sequence.fromIterable(MapSequence.fromMap(declarations).values()).toListSequence();
          }

          @Override
          public SNodePointer getSearchScopeValidatorNode() {
            return breakingNode_dhpr7m_a0a1a0a0a1a0b0a1a0;
          }
        };
      }
    });
    return references;
  }
}
