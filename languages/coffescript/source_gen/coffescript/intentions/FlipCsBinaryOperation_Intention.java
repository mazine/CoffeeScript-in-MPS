package coffescript.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.BaseIntention;
import jetbrains.mps.intentions.Intention;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.nodeEditor.EditorContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;

public class FlipCsBinaryOperation_Intention extends BaseIntention implements Intention {
  public FlipCsBinaryOperation_Intention() {
  }

  public String getConcept() {
    return "coffescript.structure.CsBinaryOperation";
  }

  public boolean isParameterized() {
    return false;
  }

  public boolean isErrorIntention() {
    return false;
  }

  public boolean isAvailableInChildNodes() {
    return false;
  }

  public String getDescription(final SNode node, final EditorContext editorContext) {
    return "Flips operands";
  }

  public boolean isApplicable(final SNode node, final EditorContext editorContext) {
    if (!(this.isApplicableToNode(node, editorContext))) {
      return false;
    }
    return true;
  }

  public boolean isApplicableToNode(final SNode node, final EditorContext editorContext) {
    return (SLinkOperations.getTarget(SLinkOperations.getTarget(node, "csBinaryOperator", false), "reflectOperator", false) != null);
  }

  public void execute(final SNode node, final EditorContext editorContext) {
    SNode oldLeft = SLinkOperations.getTarget(node, "leftExpression", true);
    SNode oldRight = SLinkOperations.getTarget(node, "rightExpression", true);
    SLinkOperations.setTarget(node, "leftExpression", null, true);
    SLinkOperations.setTarget(node, "rightExpression", null, true);
    SLinkOperations.setTarget(node, "leftExpression", oldRight, true);
    SLinkOperations.setTarget(node, "rightExpression", oldLeft, true);
    SLinkOperations.setTarget(node, "csBinaryOperator", SLinkOperations.getTarget(SLinkOperations.getTarget(node, "csBinaryOperator", false), "reflectOperator", false), false);
  }

  public String getLocationString() {
    return "coffescript.intentions";
  }
}
