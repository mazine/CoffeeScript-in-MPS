package coffescript.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractInferenceRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.InferenceRule_Runtime;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.typesystem.inference.EquationInfo;
import jetbrains.mps.smodel.SModelUtil_new;
import java.util.Set;
import java.util.HashSet;
import jetbrains.mps.project.GlobalScope;
import jetbrains.mps.smodel.SReference;
import jetbrains.mps.smodel.SModelReference;
import jetbrains.mps.smodel.SNodeId;
import jetbrains.mps.lang.typesystem.runtime.HUtil;

public class typeof_CsArrayExpression_InferenceRule extends AbstractInferenceRule_Runtime implements InferenceRule_Runtime {
  public typeof_CsArrayExpression_InferenceRule() {
  }

  public void applyRule(final SNode csArrayExpression, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    final SNode EXPRESSION_TYPE_typevar_1234527900631 = typeCheckingContext.createNewRuntimeTypesVariable();
    if (ListSequence.fromList(SLinkOperations.getTargets(csArrayExpression, "csArgList", true)).isNotEmpty()) {
      for (SNode csExpression : ListSequence.fromList(SLinkOperations.getTargets(csArrayExpression, "csArgList", true))) {
        {
          SNode _nodeToCheck_1029348928467 = csExpression;
          EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, "r:4105a9d4-65a3-46de-86a8-c528ce333176(coffescript.typesystem)", "1234527951727", 0, null);
          typeCheckingContext.createLessThanInequality((SNode) typeCheckingContext.typeOf(_nodeToCheck_1029348928467, "r:4105a9d4-65a3-46de-86a8-c528ce333176(coffescript.typesystem)", "1234527946532", true), (SNode) typeCheckingContext.getRepresentative(EXPRESSION_TYPE_typevar_1234527900631), false, true, _info_12389875345);
        }
      }
    }
    {
      SNode _nodeToCheck_1029348928467 = csArrayExpression;
      EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, "r:4105a9d4-65a3-46de-86a8-c528ce333176(coffescript.typesystem)", "1234527966120", 0, null);
      typeCheckingContext.createEquation((SNode) typeCheckingContext.typeOf(_nodeToCheck_1029348928467, "r:4105a9d4-65a3-46de-86a8-c528ce333176(coffescript.typesystem)", "1234527961678", true), (SNode) new typeof_CsArrayExpression_InferenceRule.QuotationClass_7s5xd0_a0a2a0().createNode(typeCheckingContext.getRepresentative(EXPRESSION_TYPE_typevar_1234527900631), typeCheckingContext), _info_12389875345);
    }
  }

  public String getApplicableConceptFQName() {
    return "coffescript.structure.CsArrayExpression";
  }

  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    {
      boolean b = SModelUtil_new.isAssignableConcept(argument.getConceptFqName(), this.getApplicableConceptFQName());
      return new IsApplicableStatus(b, null);
    }
  }

  public boolean overrides() {
    return false;
  }

  public static class QuotationClass_7s5xd0_a0a2a0 {
    public QuotationClass_7s5xd0_a0a2a0() {
    }

    public SNode createNode(Object parameter_5, final TypeCheckingContext typeCheckingContext) {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_1 = null;
      SNode quotedNode_2 = null;
      {
        quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("webr.javascript.structure.ClassType", null, GlobalScope.getInstance(), false);
        SNode quotedNode1_3 = quotedNode_1;
        quotedNode1_3.addReference(SReference.create("classDeclaration", quotedNode1_3, SModelReference.fromString("r:2a71aaed-21c7-4624-8f79-2969ade37068(webr.javascript.global)"), SNodeId.fromString("1182979632507")));
        {
          quotedNode_2 = (SNode) parameter_5;
          SNode quotedNode1_4;
          if (_parameterValues_129834374.contains(quotedNode_2)) {
            quotedNode1_4 = HUtil.copyIfNecessary(quotedNode_2, typeCheckingContext);
          } else {
            _parameterValues_129834374.add(quotedNode_2);
            quotedNode1_4 = quotedNode_2;
          }
          if (quotedNode1_4 != null) {
            quotedNode_1.addChild("parameter", HUtil.copyIfNecessary(quotedNode1_4, typeCheckingContext));
          }
        }
        result = quotedNode1_3;
      }
      return result;
    }

    public SNode createNode(Object parameter_5) {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_1 = null;
      SNode quotedNode_2 = null;
      {
        quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("webr.javascript.structure.ClassType", null, GlobalScope.getInstance(), false);
        SNode quotedNode1_3 = quotedNode_1;
        quotedNode1_3.addReference(SReference.create("classDeclaration", quotedNode1_3, SModelReference.fromString("r:2a71aaed-21c7-4624-8f79-2969ade37068(webr.javascript.global)"), SNodeId.fromString("1182979632507")));
        {
          quotedNode_2 = (SNode) parameter_5;
          SNode quotedNode1_4;
          if (_parameterValues_129834374.contains(quotedNode_2)) {
            quotedNode1_4 = HUtil.copyIfNecessary(quotedNode_2);
          } else {
            _parameterValues_129834374.add(quotedNode_2);
            quotedNode1_4 = quotedNode_2;
          }
          if (quotedNode1_4 != null) {
            quotedNode_1.addChild("parameter", HUtil.copyIfNecessary(quotedNode1_4));
          }
        }
        result = quotedNode1_3;
      }
      return result;
    }
  }
}
