package coffescript.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractInferenceRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.InferenceRule_Runtime;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.errors.messageTargets.MessageTarget;
import jetbrains.mps.errors.messageTargets.NodeMessageTarget;
import jetbrains.mps.errors.IErrorReporter;
import jetbrains.mps.smodel.SModelUtil_new;

public class typeof_CsVariableDeclaration_InferenceRule extends AbstractInferenceRule_Runtime implements InferenceRule_Runtime {
  public typeof_CsVariableDeclaration_InferenceRule() {
  }

  public void applyRule(final SNode csVariableDeclaration, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    // global variables duplicates search 
    if ((SNodeOperations.getAncestor(csVariableDeclaration, "coffescript.structure.CsFunctionExpression", true, false) == null)) {
      SNode sourceElementList = SNodeOperations.getAncestor(csVariableDeclaration, "webr.javascript.structure.SourceElementList", true, false);
      List<SNode> globalVariables = SNodeOperations.getDescendants(sourceElementList, "coffescript.structure.CsVariableDeclaration", false, new String[]{"coffescript.structure.CsFunctionExpression"});
      for (SNode globalCsVariableDeclaration : ListSequence.fromList(globalVariables)) {
        if (csVariableDeclaration != globalCsVariableDeclaration && SPropertyOperations.getString(csVariableDeclaration, "variableName").equals(SPropertyOperations.getString(globalCsVariableDeclaration, "variableName"))) {
          {
            MessageTarget errorTarget = new NodeMessageTarget();
            IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(csVariableDeclaration, "Variable with the same name has been already declared", "r:4105a9d4-65a3-46de-86a8-c528ce333176(coffescript.typesystem)", "5982157167539828266", null, errorTarget);
          }
          {
            MessageTarget errorTarget = new NodeMessageTarget();
            IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(globalCsVariableDeclaration, "Variable with the same name has been already declared", "r:4105a9d4-65a3-46de-86a8-c528ce333176(coffescript.typesystem)", "5982157167539828269", null, errorTarget);
          }
        }
      }
    }

    // duplicates varibles declaration search inside functions 
    SNode csFunctionExpression = SNodeOperations.getAncestor(csVariableDeclaration, "coffescript.structure.CsFunctionExpression", true, false);
    List<SNode> functionVariableDeclarations = SNodeOperations.getDescendants(csFunctionExpression, "coffescript.structure.CsVariableDeclaration", false, new String[]{"coffescript.structure.CsFunctionExpression"});
    for (SNode functionVariableDeclaration : ListSequence.fromList(functionVariableDeclarations)) {
      if (csVariableDeclaration != functionVariableDeclaration && SPropertyOperations.getString(csVariableDeclaration, "variableName").equals(SPropertyOperations.getString(functionVariableDeclaration, "variableName"))) {
        {
          MessageTarget errorTarget = new NodeMessageTarget();
          IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(csVariableDeclaration, "Variable with the same name has been already declared in this function", "r:4105a9d4-65a3-46de-86a8-c528ce333176(coffescript.typesystem)", "5982157167539828320", null, errorTarget);
        }
        {
          MessageTarget errorTarget = new NodeMessageTarget();
          IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(functionVariableDeclaration, "Variable with the same name has been already declared in this function", "r:4105a9d4-65a3-46de-86a8-c528ce333176(coffescript.typesystem)", "5982157167539828323", null, errorTarget);
        }
      }
    }

  }

  public String getApplicableConceptFQName() {
    return "coffescript.structure.CsVariableDeclaration";
  }

  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    {
      boolean b = SModelUtil_new.isAssignableConcept(argument.getConceptFqName(), this.getApplicableConceptFQName());
      return new IsApplicableStatus(b, null);
    }
  }

  public boolean overrides() {
    return false;
  }
}
