package coffescript.actions;

/*Generated by MPS */

import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.smodel.action.SideTransformPreconditionContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import org.apache.commons.lang.StringUtils;
import jetbrains.mps.smodel.action.NodeSetupContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import java.util.List;
import jetbrains.mps.smodel.action.INodeSubstituteAction;
import jetbrains.mps.smodel.action.NodeSubstituteActionsFactoryContext;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.smodel.action.IChildNodeSetter;
import jetbrains.mps.smodel.action.AbstractChildNodeSetter;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.action.SNodeFactoryOperations;
import jetbrains.mps.smodel.IScope;
import jetbrains.mps.smodel.action.ModelActions;
import jetbrains.mps.smodel.action.SideTransformActionsBuilderContext;
import jetbrains.mps.smodel.action.AbstractSideTransformHintSubstituteAction;
import jetbrains.mps.util.Calculable;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import coffescript.behavior.CsExpression_Behavior;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;

public class QueriesGenerated {
  public static boolean sideTransformHintSubstituteActionsBuilder_Precondition_CsParameterDeclaration_989807379181179478(final IOperationContext operationContext, final SideTransformPreconditionContext _context) {
    return SConceptPropertyOperations.getBoolean(_context.getSourceNode(), "initializable") && (SLinkOperations.getTarget(_context.getSourceNode(), "initializer", true) == null);
  }

  public static boolean sideTransformHintSubstituteActionsBuilder_Precondition_CsIfExpression_7482744398118337991(final IOperationContext operationContext, final SideTransformPreconditionContext _context) {
    return StringUtils.isEmpty(SConceptPropertyOperations.getString(_context.getSourceNode(), "then"));
  }

  public static void nodeFactory_NodeSetup_CsParenthesesExpression_2125537478022180802(final IOperationContext operationContext, final NodeSetupContext _context) {
    if (SNodeOperations.isInstanceOf(_context.getSampleNode(), "coffescript.structure.CsExpression")) {
      SLinkOperations.setTarget(_context.getNewNode(), "csExpression", SNodeOperations.cast(_context.getSampleNode(), "coffescript.structure.CsExpression"), true);
    }
  }

  public static void nodeFactory_NodeSetup_CsReturnStatement_2125537478022180807(final IOperationContext operationContext, final NodeSetupContext _context) {
    if (SNodeOperations.isInstanceOf(_context.getSampleNode(), "coffescript.structure.CsExpression")) {
      SLinkOperations.setTarget(_context.getNewNode(), "csExpression", SNodeOperations.cast(_context.getSampleNode(), "coffescript.structure.CsExpression"), true);
    }
  }

  public static List<INodeSubstituteAction> nodeSubstituteActionsBuilder_ActionsFactory_CsStatement_8981878424754649190(final IOperationContext operationContext, final NodeSubstituteActionsFactoryContext _context) {
    List<INodeSubstituteAction> result = ListSequence.fromList(new ArrayList<INodeSubstituteAction>());
    {
      SNode wrappedConcept = SConceptOperations.findConceptDeclaration("coffescript.structure.CsExpression");
      IChildNodeSetter setter = new AbstractChildNodeSetter() {
        public SNode wrapNode(SNode nodeToWrap, SModel model) {
          SNode csExpressionStatement = SNodeFactoryOperations.createNewNode(model, "coffescript.structure.CsExpressionStatement", null);
          SLinkOperations.setTarget(csExpressionStatement, "csExpression", nodeToWrap, true);
          return csExpressionStatement;
        }

        public boolean returnSmallPart(SNode nodeToWrap) {
          return false;
        }

        public SNode doExecute(SNode pn, SNode oc, SNode nc, IScope sc) {
          SNode wrappedNode = this.wrapNode(nc, nc.getModel());
          _context.getChildSetter().execute(_context.getParentNode(), _context.getCurrentTargetNode(), wrappedNode, operationContext.getScope());
          if (this.returnSmallPart(nc)) {
            return nc;
          } else {
            return wrappedNode;
          }
        }
      };
      ListSequence.fromList(result).addSequence(ListSequence.fromList(ModelActions.createChildSubstituteActions(_context.getParentNode(), _context.getCurrentTargetNode(), wrappedConcept, setter, operationContext)));
    }
    return result;
  }

  public static List<INodeSubstituteAction> sideTransform_ActionsFactory_CsParameterDeclaration_989807379181179477(final IOperationContext operationContext, final SideTransformActionsBuilderContext _context) {
    List<INodeSubstituteAction> result = ListSequence.fromList(new ArrayList<INodeSubstituteAction>());
    {
      SNode concept = SConceptOperations.findConceptDeclaration("coffescript.structure.CsBaseVariableDeclaration");
      ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(concept, _context.getSourceNode()) {
        public SNode doSubstitute(String pattern) {
          return SNodeFactoryOperations.setNewChild(_context.getSourceNode(), "initializer", "coffescript.structure.CsExpression");
        }

        public String getMatchingText(String pattern) {
          return "=";
        }

        public String getVisibleMatchingText(String pattern) {
          return this.getMatchingText(pattern);
        }

        public String getDescriptionText(String pattern) {
          return "set initializer for parameter";
        }
      });
    }
    return result;
  }

  public static List<INodeSubstituteAction> sideTransform_ActionsFactory_CsIfExpression_7482744398118337990(final IOperationContext operationContext, final SideTransformActionsBuilderContext _context) {
    List<INodeSubstituteAction> result = ListSequence.fromList(new ArrayList<INodeSubstituteAction>());
    {
      SNode concept = SConceptOperations.findConceptDeclaration("coffescript.structure.CsIfExpression");
      ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(concept, _context.getSourceNode()) {
        public SNode doSubstitute(String pattern) {
          SConceptPropertyOperations.setString(_context.getSourceNode(), "then", "then");
          return _context.getSourceNode();
        }

        public String getMatchingText(String pattern) {
          return "then";
        }

        public String getVisibleMatchingText(String pattern) {
          return this.getMatchingText(pattern);
        }
      });
    }
    return result;
  }

  public static List<INodeSubstituteAction> sideTransform_ActionsFactory_CsExpression_1527977838046897127(final IOperationContext operationContext, final SideTransformActionsBuilderContext _context) {
    List<INodeSubstituteAction> result = ListSequence.fromList(new ArrayList<INodeSubstituteAction>());
    {
      final SNode concept = SConceptOperations.findConceptDeclaration("coffescript.structure.CsBinaryOperation");
      Calculable calculable = new Calculable() {
        public Object calculate() {
          // <node> 
          return SModelOperations.getNodesIncludingImported(_context.getModel(), operationContext.getScope(), "coffescript.structure.CsBinaryOperator");
        }
      };
      Iterable<SNode> parameterObjects = (Iterable<SNode>) calculable.calculate();
      assert parameterObjects != null;
      for (final SNode item : parameterObjects) {
        ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(concept, item, _context.getSourceNode()) {
          public SNode doSubstitute(String pattern) {
            SNode betterLeftNode = CsExpression_Behavior.call_getPrioritizedNode_3639529227212464656(_context.getSourceNode(), (item));
            SNode csBinaryOperation = SNodeFactoryOperations.replaceWithNewChild(betterLeftNode, "coffescript.structure.CsBinaryOperation");
            SLinkOperations.setTarget(csBinaryOperation, "csBinaryOperator", (item), false);
            SLinkOperations.setTarget(csBinaryOperation, "leftExpression", betterLeftNode, true);
            return csBinaryOperation;
          }

          public String getMatchingText(String text) {
            return SPropertyOperations.getString((item), "operator");
          }

          public String getVisibleMatchingText(String text) {
            return this.getMatchingText(text);
          }

          public String getDescriptionText(String text) {
            return SPropertyOperations.getString((item), "description");
          }
        });
      }
    }
    return result;
  }

  public static List<INodeSubstituteAction> sideTransform_ActionsFactory_CsExpression_5140412041909903685(final IOperationContext operationContext, final SideTransformActionsBuilderContext _context) {
    List<INodeSubstituteAction> result = ListSequence.fromList(new ArrayList<INodeSubstituteAction>());
    {
      final SNode concept = SConceptOperations.findConceptDeclaration("coffescript.structure.CsBinaryOperation");
      Calculable calculable = new Calculable() {
        public Object calculate() {
          return SModelOperations.getNodesIncludingImported(_context.getModel(), operationContext.getScope(), "coffescript.structure.CsBinaryOperator");
        }
      };
      Iterable<SNode> parameterObjects = (Iterable<SNode>) calculable.calculate();
      assert parameterObjects != null;
      for (final SNode item : parameterObjects) {
        ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(concept, item, _context.getSourceNode()) {
          public SNode doSubstitute(String pattern) {
            SNode betterRightNode = CsExpression_Behavior.call_getPrioritizedNode_3639529227212464656(_context.getSourceNode(), (item));
            SNode csBinaryOperation = SNodeFactoryOperations.replaceWithNewChild(betterRightNode, "coffescript.structure.CsBinaryOperation");
            SLinkOperations.setTarget(csBinaryOperation, "csBinaryOperator", (item), false);
            SLinkOperations.setTarget(csBinaryOperation, "rightExpression", betterRightNode, true);
            return csBinaryOperation;
          }

          public String getMatchingText(String text) {
            return SPropertyOperations.getString((item), "operator");
          }

          public String getVisibleMatchingText(String text) {
            return this.getMatchingText(text);
          }

          public String getDescriptionText(String text) {
            return SPropertyOperations.getString((item), "description");
          }
        });
      }
    }
    return result;
  }

  public static List<INodeSubstituteAction> sideTransform_ActionsFactory_CsExpression_7753441926817234533(final IOperationContext operationContext, final SideTransformActionsBuilderContext _context) {
    List<INodeSubstituteAction> result = ListSequence.fromList(new ArrayList<INodeSubstituteAction>());
    {
      final SNode concept = SConceptOperations.findConceptDeclaration("coffescript.structure.CsUnaryOperation");
      Calculable calculable = new Calculable() {
        public Object calculate() {
          // <node> 
          return SModelOperations.getNodesIncludingImported(_context.getModel(), operationContext.getScope(), "coffescript.structure.CsUnaryOperator");

        }
      };
      Iterable<SNode> parameterObjects = (Iterable<SNode>) calculable.calculate();
      assert parameterObjects != null;
      for (final SNode item : parameterObjects) {
        ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(concept, item, _context.getSourceNode()) {
          public SNode doSubstitute(String pattern) {
            SNode csUnaryOperation = SNodeFactoryOperations.replaceWithNewChild(_context.getSourceNode(), "coffescript.structure.CsUnaryOperation");
            SLinkOperations.setTarget(csUnaryOperation, "csUnaryOperator", (item), false);
            SLinkOperations.setTarget(csUnaryOperation, "csExpression", _context.getSourceNode(), true);
            return csUnaryOperation;
          }

          public String getMatchingText(String text) {
            return SPropertyOperations.getString((item), "operator");
          }

          public String getVisibleMatchingText(String text) {
            return this.getMatchingText(text);
          }

          public String getDescriptionText(String text) {
            return SPropertyOperations.getString((item), "description");
          }
        });
      }
    }
    return result;
  }
}
