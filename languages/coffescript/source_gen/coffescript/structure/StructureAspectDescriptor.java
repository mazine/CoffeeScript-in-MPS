package coffescript.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import java.util.Arrays;
import jetbrains.mps.smodel.runtime.impl.CompiledConceptDescriptor;
import jetbrains.mps.smodel.runtime.interpreted.StructureAspectInterpreted;

public class StructureAspectDescriptor implements jetbrains.mps.smodel.runtime.StructureAspectDescriptor {
  private static String[] stringSwitchCases_1htk8d_a0a0a = new String[]{"coffescript.structure.CsArgList", "coffescript.structure.CsArrayExpression", "coffescript.structure.CsBaseVariableDeclaration", "coffescript.structure.CsBaseVariableReference", "coffescript.structure.CsBinaryOperation", "coffescript.structure.CsBinaryOperator", "coffescript.structure.CsBlock", "coffescript.structure.CsExpression", "coffescript.structure.CsExpressionStatement", "coffescript.structure.CsExpressionWrapper", "coffescript.structure.CsFunctionBlock", "coffescript.structure.CsFunctionExpression", "coffescript.structure.CsIFunction", "coffescript.structure.CsIfExpression", "coffescript.structure.CsInitVariableExpression", "coffescript.structure.CsOperator", "coffescript.structure.CsOperatorList", "coffescript.structure.CsParameterDeclaration", "coffescript.structure.CsParameterList", "coffescript.structure.CsParameterReference", "coffescript.structure.CsParenthesesExpression", "coffescript.structure.CsPriorityGroup", "coffescript.structure.CsReturnStatement", "coffescript.structure.CsSplatsParameterDeclaration", "coffescript.structure.CsStatement", "coffescript.structure.CsUnaryOperation", "coffescript.structure.CsUnaryOperator", "coffescript.structure.CsVariableDeclaration", "coffescript.structure.CsVariableReference"};

  public StructureAspectDescriptor() {
  }

  public ConceptDescriptor getDescriptor(String conceptFqName) {
    switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0a, conceptFqName)) {
      case 0:
        return new CompiledConceptDescriptor("coffescript.structure.CsArgList", "jetbrains.mps.lang.core.structure.BaseConcept", false, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"}, new String[]{}, new String[]{});
      case 1:
        return new CompiledConceptDescriptor("coffescript.structure.CsArrayExpression", "coffescript.structure.CsExpression", false, new String[]{"coffescript.structure.CsExpression"}, new String[]{}, new String[]{});
      case 2:
        return new CompiledConceptDescriptor("coffescript.structure.CsBaseVariableDeclaration", "jetbrains.mps.lang.core.structure.BaseConcept", false, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept"}, new String[]{"variableName"}, new String[]{});
      case 3:
        return new CompiledConceptDescriptor("coffescript.structure.CsBaseVariableReference", "coffescript.structure.CsExpression", false, new String[]{"coffescript.structure.CsExpression"}, new String[]{}, new String[]{"csBaseVariableDeclaration"});
      case 4:
        return new CompiledConceptDescriptor("coffescript.structure.CsBinaryOperation", "coffescript.structure.CsExpression", false, new String[]{"coffescript.structure.CsExpression"}, new String[]{}, new String[]{"csBinaryOperator"});
      case 5:
        return new CompiledConceptDescriptor("coffescript.structure.CsBinaryOperator", "coffescript.structure.CsOperator", false, new String[]{"coffescript.structure.CsOperator"}, new String[]{}, new String[]{"reflectOperator", "jsBinaryOperator"});
      case 6:
        return new CompiledConceptDescriptor("coffescript.structure.CsBlock", "jetbrains.mps.lang.core.structure.BaseConcept", false, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept", "coffescript.structure.CsFunctionBlock"}, new String[]{}, new String[]{});
      case 7:
        return new CompiledConceptDescriptor("coffescript.structure.CsExpression", "jetbrains.mps.lang.core.structure.BaseConcept", false, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept", "coffescript.structure.CsFunctionBlock"}, new String[]{}, new String[]{});
      case 8:
        return new CompiledConceptDescriptor("coffescript.structure.CsExpressionStatement", "coffescript.structure.CsStatement", false, new String[]{"coffescript.structure.CsStatement"}, new String[]{}, new String[]{});
      case 9:
        return new CompiledConceptDescriptor("coffescript.structure.CsExpressionWrapper", "coffescript.structure.CsExpression", false, new String[]{"coffescript.structure.CsExpression", "coffescript.structure.CsFunctionBlock"}, new String[]{}, new String[]{});
      case 10:
        return new CompiledConceptDescriptor("coffescript.structure.CsFunctionBlock", null, true, new String[]{}, new String[]{}, new String[]{});
      case 11:
        return new CompiledConceptDescriptor("coffescript.structure.CsFunctionExpression", "coffescript.structure.CsExpression", false, new String[]{"coffescript.structure.CsExpression", "coffescript.structure.CsIFunction"}, new String[]{}, new String[]{});
      case 12:
        return new CompiledConceptDescriptor("coffescript.structure.CsIFunction", null, true, new String[]{}, new String[]{}, new String[]{});
      case 13:
        return new CompiledConceptDescriptor("coffescript.structure.CsIfExpression", "jetbrains.mps.lang.core.structure.BaseConcept", false, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"}, new String[]{}, new String[]{});
      case 14:
        return new CompiledConceptDescriptor("coffescript.structure.CsInitVariableExpression", "coffescript.structure.CsExpression", false, new String[]{"coffescript.structure.CsExpression"}, new String[]{}, new String[]{});
      case 15:
        return new CompiledConceptDescriptor("coffescript.structure.CsOperator", "jetbrains.mps.webr.javascriptInternal.structure.Operator", false, new String[]{"jetbrains.mps.webr.javascriptInternal.structure.Operator"}, new String[]{}, new String[]{});
      case 16:
        return new CompiledConceptDescriptor("coffescript.structure.CsOperatorList", "jetbrains.mps.lang.core.structure.BaseConcept", false, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"}, new String[]{}, new String[]{});
      case 17:
        return new CompiledConceptDescriptor("coffescript.structure.CsParameterDeclaration", "coffescript.structure.CsBaseVariableDeclaration", false, new String[]{"coffescript.structure.CsBaseVariableDeclaration"}, new String[]{"optional"}, new String[]{});
      case 18:
        return new CompiledConceptDescriptor("coffescript.structure.CsParameterList", "webr.javascript.structure.FormalParameterList", false, new String[]{"webr.javascript.structure.FormalParameterList"}, new String[]{}, new String[]{});
      case 19:
        return new CompiledConceptDescriptor("coffescript.structure.CsParameterReference", "coffescript.structure.CsBaseVariableReference", false, new String[]{"coffescript.structure.CsBaseVariableReference"}, new String[]{}, new String[]{"csParamaterDeclaration"});
      case 20:
        return new CompiledConceptDescriptor("coffescript.structure.CsParenthesesExpression", "coffescript.structure.CsExpression", false, new String[]{"coffescript.structure.CsExpression"}, new String[]{}, new String[]{});
      case 21:
        return new CompiledConceptDescriptor("coffescript.structure.CsPriorityGroup", "jetbrains.mps.lang.core.structure.BaseConcept", false, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"}, new String[]{"groupName"}, new String[]{});
      case 22:
        return new CompiledConceptDescriptor("coffescript.structure.CsReturnStatement", "coffescript.structure.CsStatement", false, new String[]{"coffescript.structure.CsStatement"}, new String[]{}, new String[]{});
      case 23:
        return new CompiledConceptDescriptor("coffescript.structure.CsSplatsParameterDeclaration", "coffescript.structure.CsParameterDeclaration", false, new String[]{"coffescript.structure.CsParameterDeclaration"}, new String[]{}, new String[]{});
      case 24:
        return new CompiledConceptDescriptor("coffescript.structure.CsStatement", "webr.javascript.structure.JsStatement", false, new String[]{"webr.javascript.structure.JsStatement"}, new String[]{}, new String[]{});
      case 25:
        return new CompiledConceptDescriptor("coffescript.structure.CsUnaryOperation", "coffescript.structure.CsExpression", false, new String[]{"coffescript.structure.CsExpression"}, new String[]{}, new String[]{"csUnaryOperator"});
      case 26:
        return new CompiledConceptDescriptor("coffescript.structure.CsUnaryOperator", "coffescript.structure.CsOperator", false, new String[]{"coffescript.structure.CsOperator"}, new String[]{}, new String[]{"jsUnaryOperator"});
      case 27:
        return new CompiledConceptDescriptor("coffescript.structure.CsVariableDeclaration", "coffescript.structure.CsBaseVariableDeclaration", false, new String[]{"coffescript.structure.CsBaseVariableDeclaration", "webr.javascript.structure.IVarDeclaration"}, new String[]{}, new String[]{});
      case 28:
        return new CompiledConceptDescriptor("coffescript.structure.CsVariableReference", "coffescript.structure.CsBaseVariableReference", false, new String[]{"coffescript.structure.CsBaseVariableReference"}, new String[]{}, new String[]{"csVariableDeclaration"});
      default:
        return StructureAspectInterpreted.getInstance().getDescriptor(conceptFqName);
    }
  }
}
