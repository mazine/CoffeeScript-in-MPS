package coffescript.structure;

/*Generated by MPS */

import jetbrains.mps.lang.core.structure.BaseConcept;
import jetbrains.mps.smodel.SNode;
import java.util.Iterator;
import java.util.List;
import jetbrains.mps.lang.core.structure.Attribute;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class CsBlock extends BaseConcept implements CsFunctionBlock {
  public static final String concept = "coffescript.structure.CsBlock";
  public static final String SHORT_DESCRIPTION = "shortDescription";
  public static final String ALIAS = "alias";
  public static final String VIRTUAL_PACKAGE = "virtualPackage";
  public static final String CS_STATEMENT = "csStatement";
  public static final String SMODEL_ATTRIBUTE = "smodelAttribute";

  public CsBlock(SNode node) {
    super(node);
  }

  public String getShortDescription() {
    return this.getProperty(CsBlock.SHORT_DESCRIPTION);
  }

  public void setShortDescription(String value) {
    this.setProperty(CsBlock.SHORT_DESCRIPTION, value);
  }

  public String getAlias() {
    return this.getProperty(CsBlock.ALIAS);
  }

  public void setAlias(String value) {
    this.setProperty(CsBlock.ALIAS, value);
  }

  public String getVirtualPackage() {
    return this.getProperty(CsBlock.VIRTUAL_PACKAGE);
  }

  public void setVirtualPackage(String value) {
    this.setProperty(CsBlock.VIRTUAL_PACKAGE, value);
  }

  public int getCsStatementsCount() {
    return this.getChildCount(CsBlock.CS_STATEMENT);
  }

  public Iterator<CsStatement> csStatements() {
    return this.children(CsStatement.class, CsBlock.CS_STATEMENT);
  }

  public List<CsStatement> getCsStatements() {
    return this.getChildren(CsStatement.class, CsBlock.CS_STATEMENT);
  }

  public void addCsStatement(CsStatement node) {
    this.addChild(CsBlock.CS_STATEMENT, node);
  }

  public void insertCsStatement(CsStatement prev, CsStatement node) {
    this.insertChild(prev, CsBlock.CS_STATEMENT, node);
  }

  public int getSmodelAttributesCount() {
    return this.getChildCount(CsBlock.SMODEL_ATTRIBUTE);
  }

  public Iterator<Attribute> smodelAttributes() {
    return this.children(Attribute.class, CsBlock.SMODEL_ATTRIBUTE);
  }

  public List<Attribute> getSmodelAttributes() {
    return this.getChildren(Attribute.class, CsBlock.SMODEL_ATTRIBUTE);
  }

  public void addSmodelAttribute(Attribute node) {
    this.addChild(CsBlock.SMODEL_ATTRIBUTE, node);
  }

  public void insertSmodelAttribute(Attribute prev, Attribute node) {
    this.insertChild(prev, CsBlock.SMODEL_ATTRIBUTE, node);
  }

  public static CsBlock newInstance(SModel sm, boolean init) {
    return (CsBlock) SModelUtil_new.instantiateConceptDeclaration("coffescript.structure.CsBlock", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static CsBlock newInstance(SModel sm) {
    return CsBlock.newInstance(sm, false);
  }
}
