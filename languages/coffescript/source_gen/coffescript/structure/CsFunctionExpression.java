package coffescript.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import java.util.Iterator;
import jetbrains.mps.lang.core.structure.Attribute;
import java.util.List;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class CsFunctionExpression extends CsExpression implements CsIFunction {
  public static final String concept = "coffescript.structure.CsFunctionExpression";
  public static final String SHORT_DESCRIPTION = "shortDescription";
  public static final String ALIAS = "alias";
  public static final String VIRTUAL_PACKAGE = "virtualPackage";
  public static final String CS_FUNCTION_BLOCK = "csFunctionBlock";
  public static final String CS_PARAMETER_LIST = "csParameterList";
  public static final String SMODEL_ATTRIBUTE = "smodelAttribute";

  public CsFunctionExpression(SNode node) {
    super(node);
  }

  public String getShortDescription() {
    return this.getProperty(CsFunctionExpression.SHORT_DESCRIPTION);
  }

  public void setShortDescription(String value) {
    this.setProperty(CsFunctionExpression.SHORT_DESCRIPTION, value);
  }

  public String getAlias() {
    return this.getProperty(CsFunctionExpression.ALIAS);
  }

  public void setAlias(String value) {
    this.setProperty(CsFunctionExpression.ALIAS, value);
  }

  public String getVirtualPackage() {
    return this.getProperty(CsFunctionExpression.VIRTUAL_PACKAGE);
  }

  public void setVirtualPackage(String value) {
    this.setProperty(CsFunctionExpression.VIRTUAL_PACKAGE, value);
  }

  public CsFunctionBlock getCsFunctionBlock() {
    return (CsFunctionBlock) this.getChild(CsFunctionBlock.class, CsFunctionExpression.CS_FUNCTION_BLOCK);
  }

  public void setCsFunctionBlock(CsFunctionBlock node) {
    super.setChild(CsFunctionExpression.CS_FUNCTION_BLOCK, node);
  }

  public CsParameterList getCsParameterList() {
    return (CsParameterList) this.getChild(CsParameterList.class, CsFunctionExpression.CS_PARAMETER_LIST);
  }

  public void setCsParameterList(CsParameterList node) {
    super.setChild(CsFunctionExpression.CS_PARAMETER_LIST, node);
  }

  public int getSmodelAttributesCount() {
    return this.getChildCount(CsFunctionExpression.SMODEL_ATTRIBUTE);
  }

  public Iterator<Attribute> smodelAttributes() {
    return this.children(Attribute.class, CsFunctionExpression.SMODEL_ATTRIBUTE);
  }

  public List<Attribute> getSmodelAttributes() {
    return this.getChildren(Attribute.class, CsFunctionExpression.SMODEL_ATTRIBUTE);
  }

  public void addSmodelAttribute(Attribute node) {
    this.addChild(CsFunctionExpression.SMODEL_ATTRIBUTE, node);
  }

  public void insertSmodelAttribute(Attribute prev, Attribute node) {
    this.insertChild(prev, CsFunctionExpression.SMODEL_ATTRIBUTE, node);
  }

  public static CsFunctionExpression newInstance(SModel sm, boolean init) {
    return (CsFunctionExpression) SModelUtil_new.instantiateConceptDeclaration("coffescript.structure.CsFunctionExpression", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static CsFunctionExpression newInstance(SModel sm) {
    return CsFunctionExpression.newInstance(sm, false);
  }
}
