package coffescript.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class CsBinaryOperation extends CsExpression {
  public static final String concept = "coffescript.structure.CsBinaryOperation";
  public static final String CS_BINARY_OPERATOR = "csBinaryOperator";
  public static final String LEFT_EXPRESSION = "leftExpression";
  public static final String RIGHT_EXPRESSION = "rightExpression";

  public CsBinaryOperation(SNode node) {
    super(node);
  }

  public CsBinaryOperator getCsBinaryOperator() {
    return (CsBinaryOperator) this.getReferent(CsBinaryOperator.class, CsBinaryOperation.CS_BINARY_OPERATOR);
  }

  public void setCsBinaryOperator(CsBinaryOperator node) {
    super.setReferent(CsBinaryOperation.CS_BINARY_OPERATOR, node);
  }

  public CsExpression getLeftExpression() {
    return (CsExpression) this.getChild(CsExpression.class, CsBinaryOperation.LEFT_EXPRESSION);
  }

  public void setLeftExpression(CsExpression node) {
    super.setChild(CsBinaryOperation.LEFT_EXPRESSION, node);
  }

  public CsExpression getRightExpression() {
    return (CsExpression) this.getChild(CsExpression.class, CsBinaryOperation.RIGHT_EXPRESSION);
  }

  public void setRightExpression(CsExpression node) {
    super.setChild(CsBinaryOperation.RIGHT_EXPRESSION, node);
  }

  public static CsBinaryOperation newInstance(SModel sm, boolean init) {
    return (CsBinaryOperation) SModelUtil_new.instantiateConceptDeclaration("coffescript.structure.CsBinaryOperation", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static CsBinaryOperation newInstance(SModel sm) {
    return CsBinaryOperation.newInstance(sm, false);
  }
}
